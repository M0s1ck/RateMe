// Package api Code generated by swaggo/swag. DO NOT EDIT
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/get/{id}": {
            "get": {
                "description": "Get a file of a photo from storage by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Photos"
                ],
                "summary": "Get a photo (file)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Photo id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/presigned/upload": {
            "get": {
                "description": "Gets a presigned url to upload a new photo to S3",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Photos"
                ],
                "summary": "Get a presigned url to upload a photo",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PresignedUploadUrlResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorInternalResponse"
                        }
                    }
                }
            }
        },
        "/presigned/upload/{id}": {
            "put": {
                "description": "Get a presigned url to update an existing photo in S3",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Photos"
                ],
                "summary": "Get a presigned url to update a photo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Photo id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PresignedUploadUrlResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorNotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorInternalResponse"
                        }
                    }
                }
            }
        },
        "/presigned/{id}": {
            "get": {
                "description": "Get a presigned url to a photo from storage by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Photos"
                ],
                "summary": "Get a presigned url to a photo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Photo id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.PresignedUrlResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorNotFoundResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorInternalResponse"
                        }
                    }
                }
            }
        },
        "/remove/{id}": {
            "delete": {
                "description": "Remove a photo from S3 by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Photos"
                ],
                "summary": "Remove a photo",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Photo id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorInternalResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ErrorInternalResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal Server Error"
                }
            }
        },
        "dto.ErrorNotFoundResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Photo with id=1214a280-1162-408a-918f-5cb9300194ce was not found"
                }
            }
        },
        "dto.PresignedUploadUrlResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "1214a280-1162-408a-918f-5cb9300174ce"
                },
                "url": {
                    "type": "string",
                    "example": "http://localhost:9000/photos/1214a280-1162-408a-918f-5cb9300174ce.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=minioadmin%2F20250815%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20250815T140417Z\u0026X-Amz-Expires=1000\u0026X-Amz-SignedHeaders=host\u0026X-Amz-Signature=dee82423f46583c7027b704d486620dc601766fd198887d60345cc3ee9872549"
                }
            }
        },
        "dto.PresignedUrlResponse": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "example": "http://localhost:9000/photos/1214a288-1362-408a-918f-5cb9300174ce.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256\u0026X-Amz-Credential=minioadmin%2F20250815%2Fus-east-1%2Fs3%2Faws4_request\u0026X-Amz-Date=20250815T143131Z\u0026X-Amz-Expires=1000\u0026X-Amz-SignedHeaders=host\u0026response-content-disposition=attachment%3B%20filename%3D%221214a280-1162-408a-918f-5cb9300174ce.jpg%22\u0026X-Amz-Signature=97b7e7c5cf44566f2cbfc246eeb26493267e8ff4afc184532d8b3f4af0b5e142"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
